<?xml version="1.0"?>
<!-- DataDefinitions
	contains Sets and Rules and OutputRules

	Sets contains
		Set (with a mandatory name) contains
			Element with the details in the contents
			
		A can also be stored in a file
		 <set name = "aValue" fileName="rowdata.txt" fileType="ROWS"/>
		 ' filename can be absolute e.g. c:\files\data.txt, or is assumed in the same dir as the xml file
		 file is loaded in to memory once during processing when the set is accessed by a rule
		 a ROWS file has a single value on each row

		 <set name = "csv2Value" fileName="csvdata.csv" fileType="CSVCOLS" colID="2"/>
		 a CSVCOLS file is a CSV file, and the colID specifies the column ID of the data
		 default columnID is 1

	Rules contains
		Rule (with a mandatory name)

		a rule can contain any of the rule blocks in any order

		Rule Blocks:

			SetOperation
			Range
			Term
			Optional
			Choice
			Repeat

	OutputRules contains
		OutputRule (with a mandatory name) and optional type

		an outputRule can contain any of the rule blocks in any order
		but only <record></record> blocks are written out during the outputRule processing
		
		type can be TEXT, XML or CSV
		
		when 
		 <OutputRule name="asText" type = "TEXT">
		 	 an records are written as is, and fields are basically ignored, although all
		 	 contents are written out
		 </OutputRule>

		 <OutputRule name="asXML" type = "XML">
		 	records must have names and fields are used and must have names
		 	written out as XML format
		 	 <recordname>
		 	   <afieldname>fieldvalue</afieldname>
		 	 </recordname>
		 </OutputRule>

		 <OutputRule name="asCSV" type = "CSV">
		 	records are written out with fields comma delimited and fields quoted where necessary
		 </OutputRule>


		Rule Blocks Allowed:

			SetOperation
			Range
			Term
			Optional
			Choice
			Repeat

		OutputRule Blocks:
			Record


		SetOperation
		============

		A SetOperation is a rule for combining sets.

		A SetOperation has a type which can be {Union,Intersection,Difference}

		A SetOperation can contain any number of OperatesOn which document the sets which
		the SetOperation block operates on.

		The rule will return a single value from the set resulting from the operation
		on the OperatesOn sets.

		Range
		=====

		A Range block is a rule for specifing a range of information.

		A Range block has a type which determines what kind of range it is {int,date,char}

		An int range is a number 'from' some value, 'to' some other value. It can have a specified:
		. return 'width' which can be
		. 'paddedWith' some character and
		. 'padded' from some direction {Left,Right}

		A date range is a range of dates 'from' some date 'to' some other date. It can have a specified:
		. 'format' which determines what is returned - default is 'dddddd ttttt'

		A char range is a range of characters 'from' some char 'to' some other char.

		A range block returns a single value from the range.

		Term
		====
		A term is a simple way of getting information into the rule, it could be a literal, contained
		in the body of the term, or it could be a 'name'd rule or set.
		 <Term>X</Term> to get a literal X
		 <Term name="aname"/> to use the value of a rule 'aname' or a set 'aname' or a variable 'aname'
		   the names are checked for matches in the order of Rule, Set, Variable
		   variables are defined with the <AS name="aname"></AS> construct

		Optional
		========

		A block which is optional i.e. defaults to a 50-50 chance of appearing or not.
			attribute probability is a double between 0 and 1, 50-50 = 0.5 which is the default

		Can contain other blocks.

		Choice
		======

		Contains <Option> blocks which have an optional weighting attribute
		A choice of blocks. One of the contained Option blocks will be selected. Option blocks can
		be weighted to have a higher (or lesser) chance of being chosen.
			e.g. <option weighting="2"> is twice as likely to be chosen as an option
			     block with a weighting of 1
			     if no weighting is provided then it defaults to 1

		Repeat
		======
		A repeat block is a block where the contents of the block are repeated a defined or random
		number of times.

		'from' the minimum number of times to repeat
		'to' the maximum number of times to repeat
			if no to is provided then the default is used.  (default currently = 100)
		'fixed' = "true" or "false" - false to get a random number in the repeat range
		   defaults to fixed
		   e.g. if we have <Repeat from="1"> then this will create a repeat
			                  loop from 1 to the default of 100
			                 <repeat from="1" fixed="false> then this will create a repeat
			                  loop of from 1 to a random value between 1 and 100
			                 <Repeat from="1" to "50">  a repeat loop from 1 to 50
			                 <Repeat from="1" to "50" fixed="false">
											  a repeat loop from 1 to a random value between 1 and 50

		Record
		=======
		A record block outputs the whole contents in the form of a record,
		e.g. with a newline at the end in a text file
		
		record has an optional name, the name is used when the record is output as part
		of an OutputRule with type XML
			<Record name="users">

			optional attribute csvheader which can be set to "TRUE" or "FALSE"
			when the record is used in an outputRule and format is CSV, this record will be
			output with a header or all the FieldNames, this will be performed once
			per outputRule  e.g. <Record name="users" csvheader="FALSE">
			
				you might also want to consider using the CSVHEADER function which works in
				outputRules to separate data from format, instead of the csvheader attribute.
				see the CSVHEADER function for more details


		Field
		=====
		A number of Field blocks can be nested within a Record block to aid creation
		of output records and easily switch the format between CSV or XML
		

		Functions
		=========

			<GUID/> has no children, will return a GUID optional attribute braces="YES"
				so <GUID braces="YES"/> would return {xxxxxx-xxxx-etc.}
				braces defaults to NO and just returns the GUID xxxxxx-xxxx-etc.


			<TRIM>
				remove any white space before or after the enclosed value
			</TRIM>
			  optional attribute border="LR" or "L" or "R"
			  default functionality is LR to trim from both sides
			  but by doing just L you just trim the left and for R just the right


			<PADSTRING maxlen="20" border="L" with="*">
				anything within the PADSTRING tags will be padded out to maxlen chars
				 using the 'with' character
				if it is already longer than maxlen then it will be truncated to maxlen
				can be padded on the left (border="L") or the right (border="R")
			</PADSTRING>
				mandatory 'maxlen' for the string
				optional 'border' can be L or R - defaults to L
				optional 'with' as the pad character - defaults to space


			<RIGHT len="20">
				return the number of characters stated by len from the right of the string
			</RIGHT>

			<LEFT len="20">
				return the number of characters stated by len from the left of the string
			</LEFT>

			<SUBSTR start="2" len="20">
				return the number of characters stated by len from character number start
			</LEFT>

			<AS name="aname">
				create the results of the enclosed items as a variable called name
				if a name is reused then the value is overwritten
				if the name is the same as a rule or a set, then the rule or set will be
				brought back when used in a <TERM> block
				variables are global once defined
			</AS>
			
			<CSVHEADER show="TRUE">
				show can be "TRUE" or "FALSE" - default is "FALSE"
				when this is wrapped around a record which is being output in a CSV outputRule
				then it can control if the header (built from fieldNames) is shown (once per OutputRule)
				or not
			</CSVHEADER>


 -->




<DataDefinitions>
	<Sets>
		<Set name = "User Role">
			<Element>Manager</Element>
			<Element>User</Element>
			<Element>Designer</Element>
			<Element>Developer</Element>
		</Set>
		<Set name = "Customer Role">
			<Element>Site Licensee</Element>
			<Element>Lifetime User</Element>
			<Element>Trial User</Element>
			<Element>Discounted User</Element>
		</Set>
		<set name = "aValue" fileName="rowdata.txt" fileType="ROWS"/>
		<set name = "csv2Value" fileName="csvdata.csv" fileType="CSVCOLS" colID="2"/>
	</Sets>
	<Rules>
		<Rule name ="personRole">
			<SetOperation type="Union">
			 	<OperatesOn>User Role</OperatesOn>
				<OperatesOn>Customer Role</OperatesOn>
			</SetOperation>
		</Rule>
		<Rule name = "padAccHeader">
			<Range type="int" width="5" padded="left" paddedWith="0" from="0" to="99999"/>
		</Rule>
		<Rule name = "spaces">
					<PadString maxlen="20" border="L"><Term></Term></PadString>
		</Rule>
		<Rule name = "accountNumber">
			<Term name="padAccHeader"/>
			<Optional probability="0.2">
				<Repeat from="3" to ="20">
					<Range type="char" from="A" to = "Z"/>
				</Repeat>
			</Optional>
			<Term name="personRole"/>
			<Range type="date" from="12/04/69" to="29/09/69" format="dddddd ttttt" />
			<Choice>
				<Option weighting="2">
					<Repeat from="3" to ="20">
						<Term>X</Term>
					</Repeat>
				</Option>
				<Option weighting ="1">
					<Repeat from="3" to ="20">
						<Term>Y</Term>
					</Repeat>
				</Option>
			</Choice>
		</Rule>

		<Rule name="userRoleRecordsXMLorCSV">
			<Repeat from="1" to="100">
				<Record name="UserRole">
				 <Field name="GUID">
					<GUID braces="YES"/>
				 </Field>
					<Field name="User Role">
						<Term name="User Role"/>
					</Field>
					<Field name="Customer Role">
						<Term name="Customer Role"/>
					</Field>
					<Field name="AccountID">
						<Term name="accountNumber"/>
					</Field>
					<Field name="A Value From Row File">
						<Term name="aValue"/>
					</Field>
					<Field name="A Value From CSV File Col2">
						<Term name="csv2Value"/>
					</Field>
				</Record>
			</Repeat>
		</Rule>

	</Rules>
	<OutputRules>

		<!--
				This output rule has various rules and functions used
				to demonstrate how some of them can be used in action
		-->
		<OutputRule name="GenericTest" type="TEXT">
		  <Record>
		  	<!--
					create two variables for use later
					aval will only have 10 chars as it is after the RIGHT
					 function has been applied
					prerightop will have all 20 chars as it is created before the right function
					 is applied
				-->
		    <AS name="aval">
		  	  <RIGHT len="10">
		  	    <AS name="prerightop">
		  		    <Term>1234567890-234567890</Term>
		  		  </AS>
		  		</RIGHT>
		  	</AS>
		  	<Term>,</Term>
		  	<LEFT len="10">
		  		<Term>1234567890-234567890</Term>
		  	</LEFT>
		  	<Term>,</Term>
		  	<SUBSTR start="3" len="10">
		  		<Term>1234567890-234567890</Term>
		  	</SUBSTR>

		  	<!-- demonstrate reuse of the variable contents -->
		  	<Term>,aval:=</Term>
		  	<Term name="aval"/>
		  	<Term>,prerightop:=</Term>
		  	<Term name="prerightop"/>

		  	<!-- example of the TRIM function -->
		  	<TRIM>
		  		<!-- create a term with white space before and after in order to trim it out -->
						<Term name="spaces"/>
						<Term>--,--</Term>
						<Term name="spaces"/>
				</TRIM>
		  </Record>
		</OutputRule>



		<!--
			 	Use the same rule, called by a Term, to create an XML file,
				or a CSV file (with and without headers
		-->
		<OutputRule name="User Roles XML" type="XML">
			<Term name="userRoleRecordsXMLorCSV"/>
		</OutputRule>

		<OutputRule name="User Roles CSV with header" type="CSV">
			<CSVHEADER show="TRUE">
				<Term name="userRoleRecordsXMLorCSV"/>
			</CSVHEADER>
		</OutputRule>

		<OutputRule name="User Roles CSV without header" type="CSV">
			<CSVHEADER show="FALSE">
				<Term name="userRoleRecordsXMLorCSV"/>
			</CSVHEADER>
		</OutputRule>


		<!--
		 		Output rule to create a CSV file, by outputing the , as
		    a term.
		    This is not as robust as using the Record & Field combination
		    but may be necessary for some tasks
		-->

		<OutputRule name="User Roles Fake CSV" type="TEXT">
			<Record>
					<Term>GUID</Term>
					<Term>,</Term>
					<Term>User Role</Term>
					<Term>,</Term>
					<Term>Customer Role</Term>
					<Term>,</Term>
					<Term>AccountID</Term>
					<Term>,</Term>
					<Term>A Value From Row File</Term>
					<Term>,</Term>
					<Term>A Value From CSV File Col2</Term>

			</Record>
			<Repeat from="1" to="100">
				<Record>
					<GUID braces="YES"/>
					<TRIM>
						<Term name="spaces"/>
						<Term>--,--</Term>
						<Term name="spaces"/>
					</TRIM>
					<Term name="User Role"/>
					<Term>,</Term>
					<Term name="Customer Role"/>
					<Term>,</Term>
					<Term name="accountNumber"/>
					<Term>,</Term>
					<Term name="aValue"/>
					<Term>,</Term>
					<Term name="csv2Value"/>

				</Record>
			</Repeat>
		</OutputRule>


	</OutputRules>
</DataDefinitions>
